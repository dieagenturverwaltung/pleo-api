/*
Tax Code API

Tax Codes OpenAPI definitions

API version: 42.14.0
Contact: team-expense-core@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tax_codes

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// TaxCodesApiService TaxCodesApi service
type TaxCodesApiService service

type ApiCreateTaxCodeRequest struct {
	ctx                      context.Context
	ApiService               *TaxCodesApiService
	taxCodeCreateUpdateModel *TaxCodeCreateUpdateModel
}

func (r ApiCreateTaxCodeRequest) TaxCodeCreateUpdateModel(taxCodeCreateUpdateModel TaxCodeCreateUpdateModel) ApiCreateTaxCodeRequest {
	r.taxCodeCreateUpdateModel = &taxCodeCreateUpdateModel
	return r
}

func (r ApiCreateTaxCodeRequest) Execute() (*DataResponseTaxCodeModel, *http.Response, error) {
	return r.ApiService.CreateTaxCodeExecute(r)
}

/*
CreateTaxCode Create a new tax code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateTaxCodeRequest
*/
func (a *TaxCodesApiService) CreateTaxCode(ctx context.Context) ApiCreateTaxCodeRequest {
	return ApiCreateTaxCodeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DataResponseTaxCodeModel
func (a *TaxCodesApiService) CreateTaxCodeExecute(r ApiCreateTaxCodeRequest) (*DataResponseTaxCodeModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataResponseTaxCodeModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodesApiService.CreateTaxCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/tax-codes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxCodeCreateUpdateModel == nil {
		return localVarReturnValue, nil, reportError("taxCodeCreateUpdateModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taxCodeCreateUpdateModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v DataResponseTaxCodeModel
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTaxCodeRequest struct {
	ctx        context.Context
	ApiService *TaxCodesApiService
	taxCodeId  string
}

func (r ApiDeleteTaxCodeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTaxCodeExecute(r)
}

/*
DeleteTaxCode Delete an tax code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param taxCodeId
	@return ApiDeleteTaxCodeRequest
*/
func (a *TaxCodesApiService) DeleteTaxCode(ctx context.Context, taxCodeId string) ApiDeleteTaxCodeRequest {
	return ApiDeleteTaxCodeRequest{
		ApiService: a,
		ctx:        ctx,
		taxCodeId:  taxCodeId,
	}
}

// Execute executes the request
func (a *TaxCodesApiService) DeleteTaxCodeExecute(r ApiDeleteTaxCodeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodesApiService.DeleteTaxCode")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/tax-codes/{taxCodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxCodeId"+"}", url.PathEscape(parameterToString(r.taxCodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTaxCodeRequest struct {
	ctx        context.Context
	ApiService *TaxCodesApiService
	taxCodeId  string
}

func (r ApiGetTaxCodeRequest) Execute() (*DataResponseTaxCodeModel, *http.Response, error) {
	return r.ApiService.GetTaxCodeExecute(r)
}

/*
GetTaxCode Returns a given tax code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param taxCodeId
	@return ApiGetTaxCodeRequest
*/
func (a *TaxCodesApiService) GetTaxCode(ctx context.Context, taxCodeId string) ApiGetTaxCodeRequest {
	return ApiGetTaxCodeRequest{
		ApiService: a,
		ctx:        ctx,
		taxCodeId:  taxCodeId,
	}
}

// Execute executes the request
//
//	@return DataResponseTaxCodeModel
func (a *TaxCodesApiService) GetTaxCodeExecute(r ApiGetTaxCodeRequest) (*DataResponseTaxCodeModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataResponseTaxCodeModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodesApiService.GetTaxCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/tax-codes/{taxCodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxCodeId"+"}", url.PathEscape(parameterToString(r.taxCodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v DataResponseTaxCodeModel
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTaxCodesRequest struct {
	ctx                  context.Context
	ApiService           *TaxCodesApiService
	companyId            *string
	before               *string
	after                *string
	offset               *int64
	limit                *int32
	sortingKeys          *[]string
	sortingOrder         *[]PageOrder
	taxCodeSearchRequest *TaxCodeSearchRequest
}

func (r ApiGetTaxCodesRequest) CompanyId(companyId string) ApiGetTaxCodesRequest {
	r.companyId = &companyId
	return r
}

// Lower bound of the page of data to return (cannot be used together with [after] or [offset])
func (r ApiGetTaxCodesRequest) Before(before string) ApiGetTaxCodesRequest {
	r.before = &before
	return r
}

// Upper bound of the page of data to return (cannot be used together with [before] or [offset])
func (r ApiGetTaxCodesRequest) After(after string) ApiGetTaxCodesRequest {
	r.after = &after
	return r
}

// Offset of the page of data to return (cannot be used together with [before] or [after])
func (r ApiGetTaxCodesRequest) Offset(offset int64) ApiGetTaxCodesRequest {
	r.offset = &offset
	return r
}

// The maximum amount of items to return
func (r ApiGetTaxCodesRequest) Limit(limit int32) ApiGetTaxCodesRequest {
	r.limit = &limit
	return r
}

// The keys to sort the results by
func (r ApiGetTaxCodesRequest) SortingKeys(sortingKeys []string) ApiGetTaxCodesRequest {
	r.sortingKeys = &sortingKeys
	return r
}

// The order to sort the results by. Must be the same length as [sortingKeys]; one order per key
func (r ApiGetTaxCodesRequest) SortingOrder(sortingOrder []PageOrder) ApiGetTaxCodesRequest {
	r.sortingOrder = &sortingOrder
	return r
}

func (r ApiGetTaxCodesRequest) TaxCodeSearchRequest(taxCodeSearchRequest TaxCodeSearchRequest) ApiGetTaxCodesRequest {
	r.taxCodeSearchRequest = &taxCodeSearchRequest
	return r
}

func (r ApiGetTaxCodesRequest) Execute() (*CursorPaginatedResponseTaxCodeModel, *http.Response, error) {
	return r.ApiService.GetTaxCodesExecute(r)
}

/*
GetTaxCodes Returns a list of tax codes

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTaxCodesRequest
*/
func (a *TaxCodesApiService) GetTaxCodes(ctx context.Context) ApiGetTaxCodesRequest {
	return ApiGetTaxCodesRequest{
		ApiService: a,
		ctx:        ctx,
		companyId:  a.client.cfg.CompanyID,
	}
}

// Execute executes the request
//
//	@return CursorPaginatedResponseTaxCodeModel
func (a *TaxCodesApiService) GetTaxCodesExecute(r ApiGetTaxCodesRequest) (*CursorPaginatedResponseTaxCodeModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CursorPaginatedResponseTaxCodeModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodesApiService.GetTaxCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/tax-codes:search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.companyId != nil {
		localVarQueryParams.Add("company_id", parameterToString(*r.companyId, ""))
	}
	if r.before != nil {
		localVarQueryParams.Add("before", parameterToString(*r.before, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.sortingKeys != nil {
		t := *r.sortingKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sorting_keys", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sorting_keys", parameterToString(t, "multi"))
		}
	}
	if r.sortingOrder != nil {
		t := *r.sortingOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sorting_order", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sorting_order", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taxCodeSearchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v CursorPaginatedResponseTaxCodeModel
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaxCodeRequest struct {
	ctx                      context.Context
	ApiService               *TaxCodesApiService
	taxCodeId                string
	taxCodeCreateUpdateModel *TaxCodeCreateUpdateModel
}

func (r ApiUpdateTaxCodeRequest) TaxCodeCreateUpdateModel(taxCodeCreateUpdateModel TaxCodeCreateUpdateModel) ApiUpdateTaxCodeRequest {
	r.taxCodeCreateUpdateModel = &taxCodeCreateUpdateModel
	return r
}

func (r ApiUpdateTaxCodeRequest) Execute() (*DataResponseTaxCodeModel, *http.Response, error) {
	return r.ApiService.UpdateTaxCodeExecute(r)
}

/*
UpdateTaxCode Update an tax code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param taxCodeId
	@return ApiUpdateTaxCodeRequest
*/
func (a *TaxCodesApiService) UpdateTaxCode(ctx context.Context, taxCodeId string) ApiUpdateTaxCodeRequest {
	return ApiUpdateTaxCodeRequest{
		ApiService: a,
		ctx:        ctx,
		taxCodeId:  taxCodeId,
	}
}

// Execute executes the request
//
//	@return DataResponseTaxCodeModel
func (a *TaxCodesApiService) UpdateTaxCodeExecute(r ApiUpdateTaxCodeRequest) (*DataResponseTaxCodeModel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataResponseTaxCodeModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodesApiService.UpdateTaxCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/tax-codes/{taxCodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taxCodeId"+"}", url.PathEscape(parameterToString(r.taxCodeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxCodeCreateUpdateModel == nil {
		return localVarReturnValue, nil, reportError("taxCodeCreateUpdateModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taxCodeCreateUpdateModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v DataResponseTaxCodeModel
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
