/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// CreateExportJob struct for CreateExportJob
type CreateExportJob struct {
	// List of accounting entry IDs the job is being created for
	AccountingEntryIds []string `json:"accountingEntryIds"`
	// Company ID the export job is being created for
	CompanyId string `json:"companyId"`
	// This is the Pleo unique identifier of the user that initiated the export job
	EmployeeId NullableString `json:"employeeId,omitempty"`
	// Non-Interactive jobs are jobs that have not been initiated by a user. These jobs are usually triggered in the background and required no user interaction. Whereas interactive jobs are the opposite. This flag should be set to true if the Job is interactive and if not set to false. By default this is set to true, i.e. by default jobs are deemed to be interactive, i.e. initiated by a user.
	IsInteractive NullableBool `json:"isInteractive,omitempty"`
}

// NewCreateExportJob instantiates a new CreateExportJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateExportJob(accountingEntryIds []string, companyId string) *CreateExportJob {
	this := CreateExportJob{}
	this.AccountingEntryIds = accountingEntryIds
	this.CompanyId = companyId
	var isInteractive bool = true
	this.IsInteractive = *NewNullableBool(&isInteractive)
	return &this
}

// NewCreateExportJobWithDefaults instantiates a new CreateExportJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateExportJobWithDefaults() *CreateExportJob {
	this := CreateExportJob{}
	var isInteractive bool = true
	this.IsInteractive = *NewNullableBool(&isInteractive)
	return &this
}

// GetAccountingEntryIds returns the AccountingEntryIds field value
func (o *CreateExportJob) GetAccountingEntryIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AccountingEntryIds
}

// GetAccountingEntryIdsOk returns a tuple with the AccountingEntryIds field value
// and a boolean to check if the value has been set.
func (o *CreateExportJob) GetAccountingEntryIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountingEntryIds, true
}

// SetAccountingEntryIds sets field value
func (o *CreateExportJob) SetAccountingEntryIds(v []string) {
	o.AccountingEntryIds = v
}

// GetCompanyId returns the CompanyId field value
func (o *CreateExportJob) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *CreateExportJob) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *CreateExportJob) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetEmployeeId returns the EmployeeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateExportJob) GetEmployeeId() string {
	if o == nil || o.EmployeeId.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmployeeId.Get()
}

// GetEmployeeIdOk returns a tuple with the EmployeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateExportJob) GetEmployeeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmployeeId.Get(), o.EmployeeId.IsSet()
}

// HasEmployeeId returns a boolean if a field has been set.
func (o *CreateExportJob) HasEmployeeId() bool {
	if o != nil && o.EmployeeId.IsSet() {
		return true
	}

	return false
}

// SetEmployeeId gets a reference to the given NullableString and assigns it to the EmployeeId field.
func (o *CreateExportJob) SetEmployeeId(v string) {
	o.EmployeeId.Set(&v)
}

// SetEmployeeIdNil sets the value for EmployeeId to be an explicit nil
func (o *CreateExportJob) SetEmployeeIdNil() {
	o.EmployeeId.Set(nil)
}

// UnsetEmployeeId ensures that no value is present for EmployeeId, not even an explicit nil
func (o *CreateExportJob) UnsetEmployeeId() {
	o.EmployeeId.Unset()
}

// GetIsInteractive returns the IsInteractive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateExportJob) GetIsInteractive() bool {
	if o == nil || o.IsInteractive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsInteractive.Get()
}

// GetIsInteractiveOk returns a tuple with the IsInteractive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateExportJob) GetIsInteractiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsInteractive.Get(), o.IsInteractive.IsSet()
}

// HasIsInteractive returns a boolean if a field has been set.
func (o *CreateExportJob) HasIsInteractive() bool {
	if o != nil && o.IsInteractive.IsSet() {
		return true
	}

	return false
}

// SetIsInteractive gets a reference to the given NullableBool and assigns it to the IsInteractive field.
func (o *CreateExportJob) SetIsInteractive(v bool) {
	o.IsInteractive.Set(&v)
}

// SetIsInteractiveNil sets the value for IsInteractive to be an explicit nil
func (o *CreateExportJob) SetIsInteractiveNil() {
	o.IsInteractive.Set(nil)
}

// UnsetIsInteractive ensures that no value is present for IsInteractive, not even an explicit nil
func (o *CreateExportJob) UnsetIsInteractive() {
	o.IsInteractive.Unset()
}

func (o CreateExportJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountingEntryIds"] = o.AccountingEntryIds
	}
	if true {
		toSerialize["companyId"] = o.CompanyId
	}
	if o.EmployeeId.IsSet() {
		toSerialize["employeeId"] = o.EmployeeId.Get()
	}
	if o.IsInteractive.IsSet() {
		toSerialize["isInteractive"] = o.IsInteractive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateExportJob struct {
	value *CreateExportJob
	isSet bool
}

func (v NullableCreateExportJob) Get() *CreateExportJob {
	return v.value
}

func (v *NullableCreateExportJob) Set(val *CreateExportJob) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExportJob) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExportJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExportJob(val *CreateExportJob) *NullableCreateExportJob {
	return &NullableCreateExportJob{value: val, isSet: true}
}

func (v NullableCreateExportJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExportJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
