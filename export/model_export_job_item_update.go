/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// ExportJobItemUpdate struct for ExportJobItemUpdate
type ExportJobItemUpdate struct {
	Data []ExportJobItem `json:"data"`
	// If any errors occurred in updating the export job items, they will be listed here
	Errors []ExportJobItemUpdateError `json:"errors"`
}

// NewExportJobItemUpdate instantiates a new ExportJobItemUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportJobItemUpdate(data []ExportJobItem, errors []ExportJobItemUpdateError) *ExportJobItemUpdate {
	this := ExportJobItemUpdate{}
	this.Data = data
	this.Errors = errors
	return &this
}

// NewExportJobItemUpdateWithDefaults instantiates a new ExportJobItemUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportJobItemUpdateWithDefaults() *ExportJobItemUpdate {
	this := ExportJobItemUpdate{}
	return &this
}

// GetData returns the Data field value
func (o *ExportJobItemUpdate) GetData() []ExportJobItem {
	if o == nil {
		var ret []ExportJobItem
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ExportJobItemUpdate) GetDataOk() ([]ExportJobItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ExportJobItemUpdate) SetData(v []ExportJobItem) {
	o.Data = v
}

// GetErrors returns the Errors field value
func (o *ExportJobItemUpdate) GetErrors() []ExportJobItemUpdateError {
	if o == nil {
		var ret []ExportJobItemUpdateError
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ExportJobItemUpdate) GetErrorsOk() ([]ExportJobItemUpdateError, bool) {
	if o == nil {
		return nil, false
	}
	return o.Errors, true
}

// SetErrors sets field value
func (o *ExportJobItemUpdate) SetErrors(v []ExportJobItemUpdateError) {
	o.Errors = v
}

func (o ExportJobItemUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableExportJobItemUpdate struct {
	value *ExportJobItemUpdate
	isSet bool
}

func (v NullableExportJobItemUpdate) Get() *ExportJobItemUpdate {
	return v.value
}

func (v *NullableExportJobItemUpdate) Set(val *ExportJobItemUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableExportJobItemUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableExportJobItemUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportJobItemUpdate(val *ExportJobItemUpdate) *NullableExportJobItemUpdate {
	return &NullableExportJobItemUpdate{value: val, isSet: true}
}

func (v NullableExportJobItemUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportJobItemUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
