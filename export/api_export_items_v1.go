/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
)

// ExportItemsV1ApiService ExportItemsV1Api service
type ExportItemsV1ApiService service

type ApiGetExportItemsV1Request struct {
	ctx          context.Context
	ApiService   *ExportItemsV1ApiService
	jobId        *string
	before       *string
	after        *string
	offset       *int64
	limit        *int32
	sortingKeys  *[]string
	sortingOrder *[]PageOrder
}

// Job ID which the accounting entries are linked to
func (r ApiGetExportItemsV1Request) JobId(jobId string) ApiGetExportItemsV1Request {
	r.jobId = &jobId
	return r
}

// Lower bound of the page of data to return (cannot be used together with [after] or [offset])
func (r ApiGetExportItemsV1Request) Before(before string) ApiGetExportItemsV1Request {
	r.before = &before
	return r
}

// Upper bound of the page of data to return (cannot be used together with [before] or [offset])
func (r ApiGetExportItemsV1Request) After(after string) ApiGetExportItemsV1Request {
	r.after = &after
	return r
}

// Offset of the page of data to return (cannot be used together with [before] or [after])
func (r ApiGetExportItemsV1Request) Offset(offset int64) ApiGetExportItemsV1Request {
	r.offset = &offset
	return r
}

// The maximum amount of items to return
func (r ApiGetExportItemsV1Request) Limit(limit int32) ApiGetExportItemsV1Request {
	r.limit = &limit
	return r
}

// The keys to sort the results by
func (r ApiGetExportItemsV1Request) SortingKeys(sortingKeys []string) ApiGetExportItemsV1Request {
	r.sortingKeys = &sortingKeys
	return r
}

// The order to sort the results by. Must be the same length as [sortingKeys]; one order per key
func (r ApiGetExportItemsV1Request) SortingOrder(sortingOrder []PageOrder) ApiGetExportItemsV1Request {
	r.sortingOrder = &sortingOrder
	return r
}

func (r ApiGetExportItemsV1Request) Execute() (*CursorPaginatedResponseExportItemV1, *http.Response, error) {
	return r.ApiService.GetExportItemsV1Execute(r)
}

/*
GetExportItemsV1 Get Export Items

Fetch a list of export items that have been marked for export for a given job. The data for these accounting entries are transformed accordingly for export purposes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetExportItemsV1Request
*/
func (a *ExportItemsV1ApiService) GetExportItemsV1(ctx context.Context) ApiGetExportItemsV1Request {
	return ApiGetExportItemsV1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CursorPaginatedResponseExportItemV1
func (a *ExportItemsV1ApiService) GetExportItemsV1Execute(r ApiGetExportItemsV1Request) (*CursorPaginatedResponseExportItemV1, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CursorPaginatedResponseExportItemV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExportItemsV1ApiService.GetExportItemsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/export-items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.jobId != nil {
		localVarQueryParams.Add("job_id", parameterToString(*r.jobId, ""))
	}
	if r.before != nil {
		localVarQueryParams.Add("before", parameterToString(*r.before, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.sortingKeys != nil {
		t := *r.sortingKeys
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sorting_keys", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sorting_keys", parameterToString(t, "multi"))
		}
	}
	if r.sortingOrder != nil {
		t := *r.sortingOrder
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sorting_order", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sorting_order", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v CursorPaginatedResponseExportItemV1
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
