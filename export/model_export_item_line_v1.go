/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// ExportItemLineV1 Accounting entry broken down in entry lines. There will always be an accounting entry line. If the accounting entry has been split into separate lines, then each line would represent the details of that accounting entry line, else there would only be one line present, representing the whole entry.
type ExportItemLineV1 struct {
	Account NullableAccountV1 `json:"account,omitempty"`
	// This is the Pleo internal identifier of this accounting entry line
	AccountingEntryLineId string           `json:"accountingEntryLineId"`
	LineAmount            ExportItemAmount `json:"lineAmount"`
	NetAmount             ExportItemAmount `json:"netAmount"`
	// Tags are used to appropriate funds to specific projects, cost centers, departments, etc. This is what is known as \"tags\" in Pleo.
	Tags []TagV1       `json:"tags,omitempty"`
	Tax  NullableTaxV1 `json:"tax,omitempty"`
}

// NewExportItemLineV1 instantiates a new ExportItemLineV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportItemLineV1(accountingEntryLineId string, lineAmount ExportItemAmount, netAmount ExportItemAmount) *ExportItemLineV1 {
	this := ExportItemLineV1{}
	this.AccountingEntryLineId = accountingEntryLineId
	this.LineAmount = lineAmount
	this.NetAmount = netAmount
	return &this
}

// NewExportItemLineV1WithDefaults instantiates a new ExportItemLineV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportItemLineV1WithDefaults() *ExportItemLineV1 {
	this := ExportItemLineV1{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportItemLineV1) GetAccount() AccountV1 {
	if o == nil || o.Account.Get() == nil {
		var ret AccountV1
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportItemLineV1) GetAccountOk() (*AccountV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *ExportItemLineV1) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableAccountV1 and assigns it to the Account field.
func (o *ExportItemLineV1) SetAccount(v AccountV1) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *ExportItemLineV1) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *ExportItemLineV1) UnsetAccount() {
	o.Account.Unset()
}

// GetAccountingEntryLineId returns the AccountingEntryLineId field value
func (o *ExportItemLineV1) GetAccountingEntryLineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountingEntryLineId
}

// GetAccountingEntryLineIdOk returns a tuple with the AccountingEntryLineId field value
// and a boolean to check if the value has been set.
func (o *ExportItemLineV1) GetAccountingEntryLineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountingEntryLineId, true
}

// SetAccountingEntryLineId sets field value
func (o *ExportItemLineV1) SetAccountingEntryLineId(v string) {
	o.AccountingEntryLineId = v
}

// GetLineAmount returns the LineAmount field value
func (o *ExportItemLineV1) GetLineAmount() ExportItemAmount {
	if o == nil {
		var ret ExportItemAmount
		return ret
	}

	return o.LineAmount
}

// GetLineAmountOk returns a tuple with the LineAmount field value
// and a boolean to check if the value has been set.
func (o *ExportItemLineV1) GetLineAmountOk() (*ExportItemAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineAmount, true
}

// SetLineAmount sets field value
func (o *ExportItemLineV1) SetLineAmount(v ExportItemAmount) {
	o.LineAmount = v
}

// GetNetAmount returns the NetAmount field value
func (o *ExportItemLineV1) GetNetAmount() ExportItemAmount {
	if o == nil {
		var ret ExportItemAmount
		return ret
	}

	return o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value
// and a boolean to check if the value has been set.
func (o *ExportItemLineV1) GetNetAmountOk() (*ExportItemAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetAmount, true
}

// SetNetAmount sets field value
func (o *ExportItemLineV1) SetNetAmount(v ExportItemAmount) {
	o.NetAmount = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportItemLineV1) GetTags() []TagV1 {
	if o == nil {
		var ret []TagV1
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportItemLineV1) GetTagsOk() ([]TagV1, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ExportItemLineV1) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagV1 and assigns it to the Tags field.
func (o *ExportItemLineV1) SetTags(v []TagV1) {
	o.Tags = v
}

// GetTax returns the Tax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportItemLineV1) GetTax() TaxV1 {
	if o == nil || o.Tax.Get() == nil {
		var ret TaxV1
		return ret
	}
	return *o.Tax.Get()
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportItemLineV1) GetTaxOk() (*TaxV1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tax.Get(), o.Tax.IsSet()
}

// HasTax returns a boolean if a field has been set.
func (o *ExportItemLineV1) HasTax() bool {
	if o != nil && o.Tax.IsSet() {
		return true
	}

	return false
}

// SetTax gets a reference to the given NullableTaxV1 and assigns it to the Tax field.
func (o *ExportItemLineV1) SetTax(v TaxV1) {
	o.Tax.Set(&v)
}

// SetTaxNil sets the value for Tax to be an explicit nil
func (o *ExportItemLineV1) SetTaxNil() {
	o.Tax.Set(nil)
}

// UnsetTax ensures that no value is present for Tax, not even an explicit nil
func (o *ExportItemLineV1) UnsetTax() {
	o.Tax.Unset()
}

func (o ExportItemLineV1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if true {
		toSerialize["accountingEntryLineId"] = o.AccountingEntryLineId
	}
	if true {
		toSerialize["lineAmount"] = o.LineAmount
	}
	if true {
		toSerialize["netAmount"] = o.NetAmount
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Tax.IsSet() {
		toSerialize["tax"] = o.Tax.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExportItemLineV1 struct {
	value *ExportItemLineV1
	isSet bool
}

func (v NullableExportItemLineV1) Get() *ExportItemLineV1 {
	return v.value
}

func (v *NullableExportItemLineV1) Set(val *ExportItemLineV1) {
	v.value = val
	v.isSet = true
}

func (v NullableExportItemLineV1) IsSet() bool {
	return v.isSet
}

func (v *NullableExportItemLineV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportItemLineV1(val *ExportItemLineV1) *NullableExportItemLineV1 {
	return &NullableExportItemLineV1{value: val, isSet: true}
}

func (v NullableExportItemLineV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportItemLineV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
