/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"

	"github.com/dieagenturverwaltung/pleo-api/shared"
)

// InvoiceInformationV1 In the case of an invoice, additional information pertaining to the invoice would be represented here.
type InvoiceInformationV1 struct {
	// Date the payment is due
	DueDate shared.NullableTime `json:"dueDate,omitempty"`
	// Date the invoice was issued
	InvoiceDate shared.Time `json:"invoiceDate"`
	// The invoice number
	InvoiceNumber string `json:"invoiceNumber"`
	// Date the invoice was paid if the status is paid
	PaymentDate shared.NullableTime `json:"paymentDate,omitempty"`
	// The invoice status
	Status              string                      `json:"status"`
	SupplierBankAccount NullableSupplierBankAccount `json:"supplierBankAccount,omitempty"`
}

// NewInvoiceInformationV1 instantiates a new InvoiceInformationV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceInformationV1(invoiceDate shared.Time, invoiceNumber string, status string) *InvoiceInformationV1 {
	this := InvoiceInformationV1{}
	this.InvoiceDate = invoiceDate
	this.InvoiceNumber = invoiceNumber
	this.Status = status
	return &this
}

// NewInvoiceInformationV1WithDefaults instantiates a new InvoiceInformationV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceInformationV1WithDefaults() *InvoiceInformationV1 {
	this := InvoiceInformationV1{}
	return &this
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceInformationV1) GetDueDate() shared.Time {
	if o == nil || o.DueDate.Get() == nil {
		var ret shared.Time
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceInformationV1) GetDueDateOk() (*shared.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *InvoiceInformationV1) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given NullableTime and assigns it to the DueDate field.
func (o *InvoiceInformationV1) SetDueDate(v shared.Time) {
	o.DueDate.Set(&v)
}

// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *InvoiceInformationV1) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *InvoiceInformationV1) UnsetDueDate() {
	o.DueDate.Unset()
}

// GetInvoiceDate returns the InvoiceDate field value
func (o *InvoiceInformationV1) GetInvoiceDate() shared.Time {
	if o == nil {
		var ret shared.Time
		return ret
	}

	return o.InvoiceDate
}

// GetInvoiceDateOk returns a tuple with the InvoiceDate field value
// and a boolean to check if the value has been set.
func (o *InvoiceInformationV1) GetInvoiceDateOk() (*shared.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceDate, true
}

// SetInvoiceDate sets field value
func (o *InvoiceInformationV1) SetInvoiceDate(v shared.Time) {
	o.InvoiceDate = v
}

// GetInvoiceNumber returns the InvoiceNumber field value
func (o *InvoiceInformationV1) GetInvoiceNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value
// and a boolean to check if the value has been set.
func (o *InvoiceInformationV1) GetInvoiceNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceNumber, true
}

// SetInvoiceNumber sets field value
func (o *InvoiceInformationV1) SetInvoiceNumber(v string) {
	o.InvoiceNumber = v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceInformationV1) GetPaymentDate() shared.Time {
	if o == nil || o.PaymentDate.Get() == nil {
		var ret shared.Time
		return ret
	}
	return *o.PaymentDate.Get()
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceInformationV1) GetPaymentDateOk() (*shared.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentDate.Get(), o.PaymentDate.IsSet()
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *InvoiceInformationV1) HasPaymentDate() bool {
	if o != nil && o.PaymentDate.IsSet() {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given NullableTime and assigns it to the PaymentDate field.
func (o *InvoiceInformationV1) SetPaymentDate(v shared.Time) {
	o.PaymentDate.Set(&v)
}

// SetPaymentDateNil sets the value for PaymentDate to be an explicit nil
func (o *InvoiceInformationV1) SetPaymentDateNil() {
	o.PaymentDate.Set(nil)
}

// UnsetPaymentDate ensures that no value is present for PaymentDate, not even an explicit nil
func (o *InvoiceInformationV1) UnsetPaymentDate() {
	o.PaymentDate.Unset()
}

// GetStatus returns the Status field value
func (o *InvoiceInformationV1) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InvoiceInformationV1) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InvoiceInformationV1) SetStatus(v string) {
	o.Status = v
}

// GetSupplierBankAccount returns the SupplierBankAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceInformationV1) GetSupplierBankAccount() SupplierBankAccount {
	if o == nil || o.SupplierBankAccount.Get() == nil {
		var ret SupplierBankAccount
		return ret
	}
	return *o.SupplierBankAccount.Get()
}

// GetSupplierBankAccountOk returns a tuple with the SupplierBankAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceInformationV1) GetSupplierBankAccountOk() (*SupplierBankAccount, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupplierBankAccount.Get(), o.SupplierBankAccount.IsSet()
}

// HasSupplierBankAccount returns a boolean if a field has been set.
func (o *InvoiceInformationV1) HasSupplierBankAccount() bool {
	if o != nil && o.SupplierBankAccount.IsSet() {
		return true
	}

	return false
}

// SetSupplierBankAccount gets a reference to the given NullableSupplierBankAccount and assigns it to the SupplierBankAccount field.
func (o *InvoiceInformationV1) SetSupplierBankAccount(v SupplierBankAccount) {
	o.SupplierBankAccount.Set(&v)
}

// SetSupplierBankAccountNil sets the value for SupplierBankAccount to be an explicit nil
func (o *InvoiceInformationV1) SetSupplierBankAccountNil() {
	o.SupplierBankAccount.Set(nil)
}

// UnsetSupplierBankAccount ensures that no value is present for SupplierBankAccount, not even an explicit nil
func (o *InvoiceInformationV1) UnsetSupplierBankAccount() {
	o.SupplierBankAccount.Unset()
}

func (o InvoiceInformationV1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DueDate.IsSet() {
		toSerialize["dueDate"] = o.DueDate.Get()
	}
	if true {
		toSerialize["invoiceDate"] = o.InvoiceDate
	}
	if true {
		toSerialize["invoiceNumber"] = o.InvoiceNumber
	}
	if o.PaymentDate.IsSet() {
		toSerialize["paymentDate"] = o.PaymentDate.Get()
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.SupplierBankAccount.IsSet() {
		toSerialize["supplierBankAccount"] = o.SupplierBankAccount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInvoiceInformationV1 struct {
	value *InvoiceInformationV1
	isSet bool
}

func (v NullableInvoiceInformationV1) Get() *InvoiceInformationV1 {
	return v.value
}

func (v *NullableInvoiceInformationV1) Set(val *InvoiceInformationV1) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceInformationV1) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceInformationV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceInformationV1(val *InvoiceInformationV1) *NullableInvoiceInformationV1 {
	return &NullableInvoiceInformationV1{value: val, isSet: true}
}

func (v NullableInvoiceInformationV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceInformationV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
