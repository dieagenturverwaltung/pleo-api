/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
	"fmt"
)

// PageOrder the model 'PageOrder'
type PageOrder string

// List of PageOrder
const (
	ASC              PageOrder = "ASC"
	ASC_NULLS_FIRST  PageOrder = "ASC_NULLS_FIRST"
	ASC_NULLS_LAST   PageOrder = "ASC_NULLS_LAST"
	DESC             PageOrder = "DESC"
	DESC_NULLS_FIRST PageOrder = "DESC_NULLS_FIRST"
	DESC_NULLS_LAST  PageOrder = "DESC_NULLS_LAST"
)

// All allowed values of PageOrder enum
var AllowedPageOrderEnumValues = []PageOrder{
	"ASC",
	"ASC_NULLS_FIRST",
	"ASC_NULLS_LAST",
	"DESC",
	"DESC_NULLS_FIRST",
	"DESC_NULLS_LAST",
}

func (v *PageOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PageOrder(value)
	for _, existing := range AllowedPageOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PageOrder", value)
}

// NewPageOrderFromValue returns a pointer to a valid PageOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPageOrderFromValue(v string) (*PageOrder, error) {
	ev := PageOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PageOrder: valid values are %v", v, AllowedPageOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PageOrder) IsValid() bool {
	for _, existing := range AllowedPageOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PageOrder value
func (v PageOrder) Ptr() *PageOrder {
	return &v
}

type NullablePageOrder struct {
	value *PageOrder
	isSet bool
}

func (v NullablePageOrder) Get() *PageOrder {
	return v.value
}

func (v *NullablePageOrder) Set(val *PageOrder) {
	v.value = val
	v.isSet = true
}

func (v NullablePageOrder) IsSet() bool {
	return v.isSet
}

func (v *NullablePageOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageOrder(val *PageOrder) *NullablePageOrder {
	return &NullablePageOrder{value: val, isSet: true}
}

func (v NullablePageOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
