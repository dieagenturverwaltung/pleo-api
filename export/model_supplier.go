/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// Supplier The supplier or merchant involved
type Supplier struct {
	// Supplier account code in the accounting system
	Account NullableString `json:"account,omitempty"`
	// This is the category code that describes the merchant/supplier's activity
	CategoryCode NullableString `json:"categoryCode,omitempty"`
	// The 2-letter country code the merchant or supplier operates in
	Country NullableString `json:"country,omitempty"`
	// Identifier of the supplier in the accounting system
	Identifier NullableString `json:"identifier,omitempty"`
	// Name of the supplier or merchant
	Name NullableString `json:"name,omitempty"`
	// This is the tax identification of the supplier in their country of operation
	TaxIdentifier NullableString `json:"taxIdentifier,omitempty"`
}

// NewSupplier instantiates a new Supplier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplier() *Supplier {
	this := Supplier{}
	return &this
}

// NewSupplierWithDefaults instantiates a new Supplier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplierWithDefaults() *Supplier {
	this := Supplier{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Supplier) GetAccount() string {
	if o == nil || o.Account.Get() == nil {
		var ret string
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Supplier) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *Supplier) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableString and assigns it to the Account field.
func (o *Supplier) SetAccount(v string) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *Supplier) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *Supplier) UnsetAccount() {
	o.Account.Unset()
}

// GetCategoryCode returns the CategoryCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Supplier) GetCategoryCode() string {
	if o == nil || o.CategoryCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.CategoryCode.Get()
}

// GetCategoryCodeOk returns a tuple with the CategoryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Supplier) GetCategoryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CategoryCode.Get(), o.CategoryCode.IsSet()
}

// HasCategoryCode returns a boolean if a field has been set.
func (o *Supplier) HasCategoryCode() bool {
	if o != nil && o.CategoryCode.IsSet() {
		return true
	}

	return false
}

// SetCategoryCode gets a reference to the given NullableString and assigns it to the CategoryCode field.
func (o *Supplier) SetCategoryCode(v string) {
	o.CategoryCode.Set(&v)
}

// SetCategoryCodeNil sets the value for CategoryCode to be an explicit nil
func (o *Supplier) SetCategoryCodeNil() {
	o.CategoryCode.Set(nil)
}

// UnsetCategoryCode ensures that no value is present for CategoryCode, not even an explicit nil
func (o *Supplier) UnsetCategoryCode() {
	o.CategoryCode.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Supplier) GetCountry() string {
	if o == nil || o.Country.Get() == nil {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Supplier) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *Supplier) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *Supplier) SetCountry(v string) {
	o.Country.Set(&v)
}

// SetCountryNil sets the value for Country to be an explicit nil
func (o *Supplier) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *Supplier) UnsetCountry() {
	o.Country.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Supplier) GetIdentifier() string {
	if o == nil || o.Identifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.Identifier.Get()
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Supplier) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Identifier.Get(), o.Identifier.IsSet()
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Supplier) HasIdentifier() bool {
	if o != nil && o.Identifier.IsSet() {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given NullableString and assigns it to the Identifier field.
func (o *Supplier) SetIdentifier(v string) {
	o.Identifier.Set(&v)
}

// SetIdentifierNil sets the value for Identifier to be an explicit nil
func (o *Supplier) SetIdentifierNil() {
	o.Identifier.Set(nil)
}

// UnsetIdentifier ensures that no value is present for Identifier, not even an explicit nil
func (o *Supplier) UnsetIdentifier() {
	o.Identifier.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Supplier) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Supplier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Supplier) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Supplier) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *Supplier) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Supplier) UnsetName() {
	o.Name.Unset()
}

// GetTaxIdentifier returns the TaxIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Supplier) GetTaxIdentifier() string {
	if o == nil || o.TaxIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaxIdentifier.Get()
}

// GetTaxIdentifierOk returns a tuple with the TaxIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Supplier) GetTaxIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxIdentifier.Get(), o.TaxIdentifier.IsSet()
}

// HasTaxIdentifier returns a boolean if a field has been set.
func (o *Supplier) HasTaxIdentifier() bool {
	if o != nil && o.TaxIdentifier.IsSet() {
		return true
	}

	return false
}

// SetTaxIdentifier gets a reference to the given NullableString and assigns it to the TaxIdentifier field.
func (o *Supplier) SetTaxIdentifier(v string) {
	o.TaxIdentifier.Set(&v)
}

// SetTaxIdentifierNil sets the value for TaxIdentifier to be an explicit nil
func (o *Supplier) SetTaxIdentifierNil() {
	o.TaxIdentifier.Set(nil)
}

// UnsetTaxIdentifier ensures that no value is present for TaxIdentifier, not even an explicit nil
func (o *Supplier) UnsetTaxIdentifier() {
	o.TaxIdentifier.Unset()
}

func (o Supplier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.CategoryCode.IsSet() {
		toSerialize["categoryCode"] = o.CategoryCode.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.Identifier.IsSet() {
		toSerialize["identifier"] = o.Identifier.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TaxIdentifier.IsSet() {
		toSerialize["taxIdentifier"] = o.TaxIdentifier.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSupplier struct {
	value *Supplier
	isSet bool
}

func (v NullableSupplier) Get() *Supplier {
	return v.value
}

func (v *NullableSupplier) Set(val *Supplier) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplier) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplier(val *Supplier) *NullableSupplier {
	return &NullableSupplier{value: val, isSet: true}
}

func (v NullableSupplier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
