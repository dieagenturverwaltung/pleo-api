/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
	"time"
)

// UpdateExportJobItem struct for UpdateExportJobItem
type UpdateExportJobItem struct {
	// ID of the accounting entry being updated
	AccountingEntryId string `json:"accountingEntryId"`
	// Date and time of the export attempt
	ExportedAt *time.Time `json:"exportedAt,omitempty"`
	// The accounting system identifier of the entry after export
	ExternalId *string `json:"externalId,omitempty"`
	// URL to access the resource of the entry in the accounting system
	ExternalUrl *string `json:"externalUrl,omitempty"`
	// Detailed message explaining the failure
	FailureReason *string `json:"failureReason,omitempty"`
	// If the export of this accounting entry failed, specify the failure reason type
	FailureReasonType *string `json:"failureReasonType,omitempty"`
	// Status of the export Item after being processed
	Status string `json:"status"`
}

// NewUpdateExportJobItem instantiates a new UpdateExportJobItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateExportJobItem(accountingEntryId string, status string) *UpdateExportJobItem {
	this := UpdateExportJobItem{}
	this.AccountingEntryId = accountingEntryId
	this.Status = status
	return &this
}

// NewUpdateExportJobItemWithDefaults instantiates a new UpdateExportJobItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateExportJobItemWithDefaults() *UpdateExportJobItem {
	this := UpdateExportJobItem{}
	return &this
}

// GetAccountingEntryId returns the AccountingEntryId field value
func (o *UpdateExportJobItem) GetAccountingEntryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountingEntryId
}

// GetAccountingEntryIdOk returns a tuple with the AccountingEntryId field value
// and a boolean to check if the value has been set.
func (o *UpdateExportJobItem) GetAccountingEntryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountingEntryId, true
}

// SetAccountingEntryId sets field value
func (o *UpdateExportJobItem) SetAccountingEntryId(v string) {
	o.AccountingEntryId = v
}

// GetExportedAt returns the ExportedAt field value if set, zero value otherwise.
func (o *UpdateExportJobItem) GetExportedAt() time.Time {
	if o == nil || o.ExportedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExportedAt
}

// GetExportedAtOk returns a tuple with the ExportedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExportJobItem) GetExportedAtOk() (*time.Time, bool) {
	if o == nil || o.ExportedAt == nil {
		return nil, false
	}
	return o.ExportedAt, true
}

// HasExportedAt returns a boolean if a field has been set.
func (o *UpdateExportJobItem) HasExportedAt() bool {
	if o != nil && o.ExportedAt != nil {
		return true
	}

	return false
}

// SetExportedAt gets a reference to the given time.Time and assigns it to the ExportedAt field.
func (o *UpdateExportJobItem) SetExportedAt(v time.Time) {
	o.ExportedAt = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *UpdateExportJobItem) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExportJobItem) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *UpdateExportJobItem) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *UpdateExportJobItem) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetExternalUrl returns the ExternalUrl field value if set, zero value otherwise.
func (o *UpdateExportJobItem) GetExternalUrl() string {
	if o == nil || o.ExternalUrl == nil {
		var ret string
		return ret
	}
	return *o.ExternalUrl
}

// GetExternalUrlOk returns a tuple with the ExternalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExportJobItem) GetExternalUrlOk() (*string, bool) {
	if o == nil || o.ExternalUrl == nil {
		return nil, false
	}
	return o.ExternalUrl, true
}

// HasExternalUrl returns a boolean if a field has been set.
func (o *UpdateExportJobItem) HasExternalUrl() bool {
	if o != nil && o.ExternalUrl != nil {
		return true
	}

	return false
}

// SetExternalUrl gets a reference to the given string and assigns it to the ExternalUrl field.
func (o *UpdateExportJobItem) SetExternalUrl(v string) {
	o.ExternalUrl = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *UpdateExportJobItem) GetFailureReason() string {
	if o == nil || o.FailureReason == nil {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExportJobItem) GetFailureReasonOk() (*string, bool) {
	if o == nil || o.FailureReason == nil {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *UpdateExportJobItem) HasFailureReason() bool {
	if o != nil && o.FailureReason != nil {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *UpdateExportJobItem) SetFailureReason(v string) {
	o.FailureReason = &v
}

// GetFailureReasonType returns the FailureReasonType field value if set, zero value otherwise.
func (o *UpdateExportJobItem) GetFailureReasonType() string {
	if o == nil || o.FailureReasonType == nil {
		var ret string
		return ret
	}
	return *o.FailureReasonType
}

// GetFailureReasonTypeOk returns a tuple with the FailureReasonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExportJobItem) GetFailureReasonTypeOk() (*string, bool) {
	if o == nil || o.FailureReasonType == nil {
		return nil, false
	}
	return o.FailureReasonType, true
}

// HasFailureReasonType returns a boolean if a field has been set.
func (o *UpdateExportJobItem) HasFailureReasonType() bool {
	if o != nil && o.FailureReasonType != nil {
		return true
	}

	return false
}

// SetFailureReasonType gets a reference to the given string and assigns it to the FailureReasonType field.
func (o *UpdateExportJobItem) SetFailureReasonType(v string) {
	o.FailureReasonType = &v
}

// GetStatus returns the Status field value
func (o *UpdateExportJobItem) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UpdateExportJobItem) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UpdateExportJobItem) SetStatus(v string) {
	o.Status = v
}

func (o UpdateExportJobItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountingEntryId"] = o.AccountingEntryId
	}
	if o.ExportedAt != nil {
		toSerialize["exportedAt"] = o.ExportedAt
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.ExternalUrl != nil {
		toSerialize["externalUrl"] = o.ExternalUrl
	}
	if o.FailureReason != nil {
		toSerialize["failureReason"] = o.FailureReason
	}
	if o.FailureReasonType != nil {
		toSerialize["failureReasonType"] = o.FailureReasonType
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateExportJobItem struct {
	value *UpdateExportJobItem
	isSet bool
}

func (v NullableUpdateExportJobItem) Get() *UpdateExportJobItem {
	return v.value
}

func (v *NullableUpdateExportJobItem) Set(val *UpdateExportJobItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateExportJobItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateExportJobItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateExportJobItem(val *UpdateExportJobItem) *NullableUpdateExportJobItem {
	return &NullableUpdateExportJobItem{value: val, isSet: true}
}

func (v NullableUpdateExportJobItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateExportJobItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
