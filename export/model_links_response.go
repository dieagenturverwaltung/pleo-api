/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// LinksResponse Contains links relevant to the export item
type LinksResponse struct {
	Api    *map[string]string `json:"api,omitempty"`
	Mobile *map[string]string `json:"mobile,omitempty"`
	Web    *map[string]string `json:"web,omitempty"`
}

// NewLinksResponse instantiates a new LinksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinksResponse() *LinksResponse {
	this := LinksResponse{}
	return &this
}

// NewLinksResponseWithDefaults instantiates a new LinksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinksResponseWithDefaults() *LinksResponse {
	this := LinksResponse{}
	return &this
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *LinksResponse) GetApi() map[string]string {
	if o == nil || o.Api == nil {
		var ret map[string]string
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksResponse) GetApiOk() (*map[string]string, bool) {
	if o == nil || o.Api == nil {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *LinksResponse) HasApi() bool {
	if o != nil && o.Api != nil {
		return true
	}

	return false
}

// SetApi gets a reference to the given map[string]string and assigns it to the Api field.
func (o *LinksResponse) SetApi(v map[string]string) {
	o.Api = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *LinksResponse) GetMobile() map[string]string {
	if o == nil || o.Mobile == nil {
		var ret map[string]string
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksResponse) GetMobileOk() (*map[string]string, bool) {
	if o == nil || o.Mobile == nil {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *LinksResponse) HasMobile() bool {
	if o != nil && o.Mobile != nil {
		return true
	}

	return false
}

// SetMobile gets a reference to the given map[string]string and assigns it to the Mobile field.
func (o *LinksResponse) SetMobile(v map[string]string) {
	o.Mobile = &v
}

// GetWeb returns the Web field value if set, zero value otherwise.
func (o *LinksResponse) GetWeb() map[string]string {
	if o == nil || o.Web == nil {
		var ret map[string]string
		return ret
	}
	return *o.Web
}

// GetWebOk returns a tuple with the Web field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksResponse) GetWebOk() (*map[string]string, bool) {
	if o == nil || o.Web == nil {
		return nil, false
	}
	return o.Web, true
}

// HasWeb returns a boolean if a field has been set.
func (o *LinksResponse) HasWeb() bool {
	if o != nil && o.Web != nil {
		return true
	}

	return false
}

// SetWeb gets a reference to the given map[string]string and assigns it to the Web field.
func (o *LinksResponse) SetWeb(v map[string]string) {
	o.Web = &v
}

func (o LinksResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Api != nil {
		toSerialize["api"] = o.Api
	}
	if o.Mobile != nil {
		toSerialize["mobile"] = o.Mobile
	}
	if o.Web != nil {
		toSerialize["web"] = o.Web
	}
	return json.Marshal(toSerialize)
}

type NullableLinksResponse struct {
	value *LinksResponse
	isSet bool
}

func (v NullableLinksResponse) Get() *LinksResponse {
	return v.value
}

func (v *NullableLinksResponse) Set(val *LinksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLinksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLinksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinksResponse(val *LinksResponse) *NullableLinksResponse {
	return &NullableLinksResponse{value: val, isSet: true}
}

func (v NullableLinksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
