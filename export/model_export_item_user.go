/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// ExportItemUser This applies to the person that initiated the spend. This would in most cases be the employee
type ExportItemUser struct {
	// This would usually represent the employee code
	Code NullableString `json:"code,omitempty"`
	// Full name of the user
	Name string `json:"name"`
}

// NewExportItemUser instantiates a new ExportItemUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportItemUser(name string) *ExportItemUser {
	this := ExportItemUser{}
	this.Name = name
	return &this
}

// NewExportItemUserWithDefaults instantiates a new ExportItemUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportItemUserWithDefaults() *ExportItemUser {
	this := ExportItemUser{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportItemUser) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportItemUser) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *ExportItemUser) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *ExportItemUser) SetCode(v string) {
	o.Code.Set(&v)
}

// SetCodeNil sets the value for Code to be an explicit nil
func (o *ExportItemUser) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *ExportItemUser) UnsetCode() {
	o.Code.Unset()
}

// GetName returns the Name field value
func (o *ExportItemUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExportItemUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExportItemUser) SetName(v string) {
	o.Name = v
}

func (o ExportItemUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableExportItemUser struct {
	value *ExportItemUser
	isSet bool
}

func (v NullableExportItemUser) Get() *ExportItemUser {
	return v.value
}

func (v *NullableExportItemUser) Set(val *ExportItemUser) {
	v.value = val
	v.isSet = true
}

func (v NullableExportItemUser) IsSet() bool {
	return v.isSet
}

func (v *NullableExportItemUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportItemUser(val *ExportItemUser) *NullableExportItemUser {
	return &NullableExportItemUser{value: val, isSet: true}
}

func (v NullableExportItemUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportItemUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
