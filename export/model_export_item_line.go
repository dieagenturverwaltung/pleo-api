/*
Export API

Export OpenAPI definitions

API version: 20.0.0
Contact: apiteam@pleo.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// ExportItemLine Accounting entry broken down in entry lines. There will always be an accounting entry line. If the accounting entry has been split into separate lines, then each line would represent the details of that accounting entry line, else there would only be one line present, representing the whole entry.
type ExportItemLine struct {
	Account NullableAccount `json:"account,omitempty"`
	// This is the Pleo internal identifier of this accounting entry line
	AccountingEntryLineId string           `json:"accountingEntryLineId"`
	LineAmount            ExportItemAmount `json:"lineAmount"`
	NetAmount             ExportItemAmount `json:"netAmount"`
	// Tags are used to appropriate funds to specific projects, cost centers, departments, etc. This is what is known as \"tags\" in Pleo.
	Tags []Tag       `json:"tags,omitempty"`
	Tax  NullableTax `json:"tax,omitempty"`
}

// NewExportItemLine instantiates a new ExportItemLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportItemLine(accountingEntryLineId string, lineAmount ExportItemAmount, netAmount ExportItemAmount) *ExportItemLine {
	this := ExportItemLine{}
	this.AccountingEntryLineId = accountingEntryLineId
	this.LineAmount = lineAmount
	this.NetAmount = netAmount
	return &this
}

// NewExportItemLineWithDefaults instantiates a new ExportItemLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportItemLineWithDefaults() *ExportItemLine {
	this := ExportItemLine{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportItemLine) GetAccount() Account {
	if o == nil || o.Account.Get() == nil {
		var ret Account
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportItemLine) GetAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *ExportItemLine) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableAccount and assigns it to the Account field.
func (o *ExportItemLine) SetAccount(v Account) {
	o.Account.Set(&v)
}

// SetAccountNil sets the value for Account to be an explicit nil
func (o *ExportItemLine) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *ExportItemLine) UnsetAccount() {
	o.Account.Unset()
}

// GetAccountingEntryLineId returns the AccountingEntryLineId field value
func (o *ExportItemLine) GetAccountingEntryLineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountingEntryLineId
}

// GetAccountingEntryLineIdOk returns a tuple with the AccountingEntryLineId field value
// and a boolean to check if the value has been set.
func (o *ExportItemLine) GetAccountingEntryLineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountingEntryLineId, true
}

// SetAccountingEntryLineId sets field value
func (o *ExportItemLine) SetAccountingEntryLineId(v string) {
	o.AccountingEntryLineId = v
}

// GetLineAmount returns the LineAmount field value
func (o *ExportItemLine) GetLineAmount() ExportItemAmount {
	if o == nil {
		var ret ExportItemAmount
		return ret
	}

	return o.LineAmount
}

// GetLineAmountOk returns a tuple with the LineAmount field value
// and a boolean to check if the value has been set.
func (o *ExportItemLine) GetLineAmountOk() (*ExportItemAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineAmount, true
}

// SetLineAmount sets field value
func (o *ExportItemLine) SetLineAmount(v ExportItemAmount) {
	o.LineAmount = v
}

// GetNetAmount returns the NetAmount field value
func (o *ExportItemLine) GetNetAmount() ExportItemAmount {
	if o == nil {
		var ret ExportItemAmount
		return ret
	}

	return o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value
// and a boolean to check if the value has been set.
func (o *ExportItemLine) GetNetAmountOk() (*ExportItemAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetAmount, true
}

// SetNetAmount sets field value
func (o *ExportItemLine) SetNetAmount(v ExportItemAmount) {
	o.NetAmount = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportItemLine) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportItemLine) GetTagsOk() ([]Tag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ExportItemLine) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *ExportItemLine) SetTags(v []Tag) {
	o.Tags = v
}

// GetTax returns the Tax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExportItemLine) GetTax() Tax {
	if o == nil || o.Tax.Get() == nil {
		var ret Tax
		return ret
	}
	return *o.Tax.Get()
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExportItemLine) GetTaxOk() (*Tax, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tax.Get(), o.Tax.IsSet()
}

// HasTax returns a boolean if a field has been set.
func (o *ExportItemLine) HasTax() bool {
	if o != nil && o.Tax.IsSet() {
		return true
	}

	return false
}

// SetTax gets a reference to the given NullableTax and assigns it to the Tax field.
func (o *ExportItemLine) SetTax(v Tax) {
	o.Tax.Set(&v)
}

// SetTaxNil sets the value for Tax to be an explicit nil
func (o *ExportItemLine) SetTaxNil() {
	o.Tax.Set(nil)
}

// UnsetTax ensures that no value is present for Tax, not even an explicit nil
func (o *ExportItemLine) UnsetTax() {
	o.Tax.Unset()
}

func (o ExportItemLine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if true {
		toSerialize["accountingEntryLineId"] = o.AccountingEntryLineId
	}
	if true {
		toSerialize["lineAmount"] = o.LineAmount
	}
	if true {
		toSerialize["netAmount"] = o.NetAmount
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Tax.IsSet() {
		toSerialize["tax"] = o.Tax.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExportItemLine struct {
	value *ExportItemLine
	isSet bool
}

func (v NullableExportItemLine) Get() *ExportItemLine {
	return v.value
}

func (v *NullableExportItemLine) Set(val *ExportItemLine) {
	v.value = val
	v.isSet = true
}

func (v NullableExportItemLine) IsSet() bool {
	return v.isSet
}

func (v *NullableExportItemLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportItemLine(val *ExportItemLine) *NullableExportItemLine {
	return &NullableExportItemLine{value: val, isSet: true}
}

func (v NullableExportItemLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportItemLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
